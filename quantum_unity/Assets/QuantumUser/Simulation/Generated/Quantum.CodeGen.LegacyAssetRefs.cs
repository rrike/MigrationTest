// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591
#pragma warning disable 0618


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    [System.ObsoleteAttribute("Use FindAsset instead")]
    public FrameAssets Assets {
      get {
      return new FrameAssets(this);
      }
    }
    public Map FindAsset(AssetRefMap assetRef) {
         return this.FindAsset<Map>(assetRef.Id);
    }
    public NavMesh FindAsset(AssetRefNavMesh assetRef) {
         return this.FindAsset<NavMesh>(assetRef.Id);
    }
    public NavMeshAgentConfig FindAsset(AssetRefNavMeshAgentConfig assetRef) {
         return this.FindAsset<NavMeshAgentConfig>(assetRef.Id);
    }
    public EntityView FindAsset(AssetRefEntityView assetRef) {
         return this.FindAsset<EntityView>(assetRef.Id);
    }
    public EntityPrototype FindAsset(AssetRefEntityPrototype assetRef) {
         return this.FindAsset<EntityPrototype>(assetRef.Id);
    }
    public PhysicsMaterial FindAsset(AssetRefPhysicsMaterial assetRef) {
         return this.FindAsset<PhysicsMaterial>(assetRef.Id);
    }
    public PolygonCollider FindAsset(AssetRefPolygonCollider assetRef) {
         return this.FindAsset<PolygonCollider>(assetRef.Id);
    }
    public TerrainCollider FindAsset(AssetRefTerrainCollider assetRef) {
         return this.FindAsset<TerrainCollider>(assetRef.Id);
    }
    public CharacterController3DConfig FindAsset(AssetRefCharacterController3DConfig assetRef) {
         return this.FindAsset<CharacterController3DConfig>(assetRef.Id);
    }
    public CharacterController2DConfig FindAsset(AssetRefCharacterController2DConfig assetRef) {
         return this.FindAsset<CharacterController2DConfig>(assetRef.Id);
    }
    public BinaryData FindAsset(AssetRefBinaryData assetRef) {
         return this.FindAsset<BinaryData>(assetRef.Id);
    }
    public SimulationConfig FindAsset(AssetRefSimulationConfig assetRef) {
         return this.FindAsset<SimulationConfig>(assetRef.Id);
    }
    public SystemsConfig FindAsset(AssetRefSystemsConfig assetRef) {
         return this.FindAsset<SystemsConfig>(assetRef.Id);
    }
    public unsafe partial struct FrameAssets {
      public Frame _f;
      public FrameAssets(Frame f) {
        _f = f;
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public Map Map(AssetRefMap assetRef) {
         return _f.FindAsset<Map>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public NavMesh NavMesh(AssetRefNavMesh assetRef) {
         return _f.FindAsset<NavMesh>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public NavMeshAgentConfig NavMeshAgentConfig(AssetRefNavMeshAgentConfig assetRef) {
         return _f.FindAsset<NavMeshAgentConfig>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public EntityView View(AssetRefEntityView assetRef) {
         return _f.FindAsset<EntityView>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public EntityView View(string view, DatabaseType dbType = DatabaseType.Default) {
         return _f.FindAsset<EntityView>(view, dbType);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public EntityPrototype Prototype(AssetRefEntityPrototype assetRef) {
         return _f.FindAsset<EntityPrototype>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public EntityPrototype Prototype(string prototype, DatabaseType dbType = DatabaseType.Default) {
         return _f.FindAsset<EntityPrototype>(prototype, dbType);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public PhysicsMaterial PhysicsMaterial(AssetRefPhysicsMaterial assetRef) {
         return _f.FindAsset<PhysicsMaterial>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public PolygonCollider PolygonCollider(AssetRefPolygonCollider assetRef) {
         return _f.FindAsset<PolygonCollider>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public TerrainCollider TerrainCollider(AssetRefTerrainCollider assetRef) {
         return _f.FindAsset<TerrainCollider>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public CharacterController3DConfig CharacterController3DConfig(AssetRefCharacterController3DConfig assetRef) {
         return _f.FindAsset<CharacterController3DConfig>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public CharacterController2DConfig CharacterController2DConfig(AssetRefCharacterController2DConfig assetRef) {
         return _f.FindAsset<CharacterController2DConfig>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public BinaryData BinaryData(AssetRefBinaryData assetRef) {
         return _f.FindAsset<BinaryData>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public SimulationConfig SimulationConfig(AssetRefSimulationConfig assetRef) {
         return _f.FindAsset<SimulationConfig>(assetRef.Id);
      }
      [System.ObsoleteAttribute("Use Frame.FindAsset instead")]
      public SystemsConfig SystemsConfig(AssetRefSystemsConfig assetRef) {
         return _f.FindAsset<SystemsConfig>(assetRef.Id);
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BinaryData))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.BinaryData> instead")]
  public unsafe partial struct AssetRefBinaryData : System.IEquatable<AssetRefBinaryData>, IAssetRef<BinaryData> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefBinaryData(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBinaryData*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBinaryData(BinaryData value) {
      var r = default(AssetRefBinaryData);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefBinaryData(AssetRef value) {
      return new AssetRefBinaryData { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefBinaryData value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<BinaryData>(AssetRefBinaryData value) {
      return new AssetRef<BinaryData>(value.Id);
    }
    public static implicit operator AssetRefBinaryData(AssetRef<BinaryData> value) {
      return new AssetRefBinaryData(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBinaryData other && Equals(other);
    }
    public Boolean Equals(AssetRefBinaryData other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBinaryData a, AssetRefBinaryData b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBinaryData a, AssetRefBinaryData b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8081;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(CharacterController2DConfig))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.CharacterController2DConfig> instead")]
  public unsafe partial struct AssetRefCharacterController2DConfig : System.IEquatable<AssetRefCharacterController2DConfig>, IAssetRef<CharacterController2DConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefCharacterController2DConfig(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefCharacterController2DConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefCharacterController2DConfig(CharacterController2DConfig value) {
      var r = default(AssetRefCharacterController2DConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefCharacterController2DConfig(AssetRef value) {
      return new AssetRefCharacterController2DConfig { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefCharacterController2DConfig value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<CharacterController2DConfig>(AssetRefCharacterController2DConfig value) {
      return new AssetRef<CharacterController2DConfig>(value.Id);
    }
    public static implicit operator AssetRefCharacterController2DConfig(AssetRef<CharacterController2DConfig> value) {
      return new AssetRefCharacterController2DConfig(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefCharacterController2DConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefCharacterController2DConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefCharacterController2DConfig a, AssetRefCharacterController2DConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefCharacterController2DConfig a, AssetRefCharacterController2DConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1511;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(CharacterController3DConfig))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.CharacterController3DConfig> instead")]
  public unsafe partial struct AssetRefCharacterController3DConfig : System.IEquatable<AssetRefCharacterController3DConfig>, IAssetRef<CharacterController3DConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefCharacterController3DConfig(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefCharacterController3DConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefCharacterController3DConfig(CharacterController3DConfig value) {
      var r = default(AssetRefCharacterController3DConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefCharacterController3DConfig(AssetRef value) {
      return new AssetRefCharacterController3DConfig { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefCharacterController3DConfig value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<CharacterController3DConfig>(AssetRefCharacterController3DConfig value) {
      return new AssetRef<CharacterController3DConfig>(value.Id);
    }
    public static implicit operator AssetRefCharacterController3DConfig(AssetRef<CharacterController3DConfig> value) {
      return new AssetRefCharacterController3DConfig(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefCharacterController3DConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefCharacterController3DConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefCharacterController3DConfig a, AssetRefCharacterController3DConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefCharacterController3DConfig a, AssetRefCharacterController3DConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1489;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(EntityPrototype))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.EntityPrototype> instead")]
  public unsafe partial struct AssetRefEntityPrototype : System.IEquatable<AssetRefEntityPrototype>, IAssetRef<EntityPrototype> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefEntityPrototype(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefEntityPrototype*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefEntityPrototype(EntityPrototype value) {
      var r = default(AssetRefEntityPrototype);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefEntityPrototype(AssetRef value) {
      return new AssetRefEntityPrototype { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefEntityPrototype value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<EntityPrototype>(AssetRefEntityPrototype value) {
      return new AssetRef<EntityPrototype>(value.Id);
    }
    public static implicit operator AssetRefEntityPrototype(AssetRef<EntityPrototype> value) {
      return new AssetRefEntityPrototype(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefEntityPrototype other && Equals(other);
    }
    public Boolean Equals(AssetRefEntityPrototype other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefEntityPrototype a, AssetRefEntityPrototype b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefEntityPrototype a, AssetRefEntityPrototype b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5701;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(EntityView))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.EntityView> instead")]
  public unsafe partial struct AssetRefEntityView : System.IEquatable<AssetRefEntityView>, IAssetRef<EntityView> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefEntityView(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefEntityView*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefEntityView(EntityView value) {
      var r = default(AssetRefEntityView);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefEntityView(AssetRef value) {
      return new AssetRefEntityView { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefEntityView value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<EntityView>(AssetRefEntityView value) {
      return new AssetRef<EntityView>(value.Id);
    }
    public static implicit operator AssetRefEntityView(AssetRef<EntityView> value) {
      return new AssetRefEntityView(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefEntityView other && Equals(other);
    }
    public Boolean Equals(AssetRefEntityView other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefEntityView a, AssetRefEntityView b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefEntityView a, AssetRefEntityView b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20107;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(Map))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.Map> instead")]
  public unsafe partial struct AssetRefMap : System.IEquatable<AssetRefMap>, IAssetRef<Map> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefMap(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefMap*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefMap(Map value) {
      var r = default(AssetRefMap);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefMap(AssetRef value) {
      return new AssetRefMap { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefMap value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<Map>(AssetRefMap value) {
      return new AssetRef<Map>(value.Id);
    }
    public static implicit operator AssetRefMap(AssetRef<Map> value) {
      return new AssetRefMap(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefMap other && Equals(other);
    }
    public Boolean Equals(AssetRefMap other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefMap a, AssetRefMap b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefMap a, AssetRefMap b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5897;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(NavMesh))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.NavMesh> instead")]
  public unsafe partial struct AssetRefNavMesh : System.IEquatable<AssetRefNavMesh>, IAssetRef<NavMesh> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefNavMesh(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefNavMesh*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefNavMesh(NavMesh value) {
      var r = default(AssetRefNavMesh);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefNavMesh(AssetRef value) {
      return new AssetRefNavMesh { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefNavMesh value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<NavMesh>(AssetRefNavMesh value) {
      return new AssetRef<NavMesh>(value.Id);
    }
    public static implicit operator AssetRefNavMesh(AssetRef<NavMesh> value) {
      return new AssetRefNavMesh(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefNavMesh other && Equals(other);
    }
    public Boolean Equals(AssetRefNavMesh other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefNavMesh a, AssetRefNavMesh b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefNavMesh a, AssetRefNavMesh b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1307;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(NavMeshAgentConfig))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.NavMeshAgentConfig> instead")]
  public unsafe partial struct AssetRefNavMeshAgentConfig : System.IEquatable<AssetRefNavMeshAgentConfig>, IAssetRef<NavMeshAgentConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefNavMeshAgentConfig(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefNavMeshAgentConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefNavMeshAgentConfig(NavMeshAgentConfig value) {
      var r = default(AssetRefNavMeshAgentConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefNavMeshAgentConfig(AssetRef value) {
      return new AssetRefNavMeshAgentConfig { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefNavMeshAgentConfig value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<NavMeshAgentConfig>(AssetRefNavMeshAgentConfig value) {
      return new AssetRef<NavMeshAgentConfig>(value.Id);
    }
    public static implicit operator AssetRefNavMeshAgentConfig(AssetRef<NavMeshAgentConfig> value) {
      return new AssetRefNavMeshAgentConfig(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefNavMeshAgentConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefNavMeshAgentConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefNavMeshAgentConfig a, AssetRefNavMeshAgentConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefNavMeshAgentConfig a, AssetRefNavMeshAgentConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8069;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(PhysicsMaterial))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.PhysicsMaterial> instead")]
  public unsafe partial struct AssetRefPhysicsMaterial : System.IEquatable<AssetRefPhysicsMaterial>, IAssetRef<PhysicsMaterial> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefPhysicsMaterial(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefPhysicsMaterial*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefPhysicsMaterial(PhysicsMaterial value) {
      var r = default(AssetRefPhysicsMaterial);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefPhysicsMaterial(AssetRef value) {
      return new AssetRefPhysicsMaterial { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefPhysicsMaterial value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<PhysicsMaterial>(AssetRefPhysicsMaterial value) {
      return new AssetRef<PhysicsMaterial>(value.Id);
    }
    public static implicit operator AssetRefPhysicsMaterial(AssetRef<PhysicsMaterial> value) {
      return new AssetRefPhysicsMaterial(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefPhysicsMaterial other && Equals(other);
    }
    public Boolean Equals(AssetRefPhysicsMaterial other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefPhysicsMaterial a, AssetRefPhysicsMaterial b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefPhysicsMaterial a, AssetRefPhysicsMaterial b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17387;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(PolygonCollider))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.PolygonCollider> instead")]
  public unsafe partial struct AssetRefPolygonCollider : System.IEquatable<AssetRefPolygonCollider>, IAssetRef<PolygonCollider> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefPolygonCollider(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefPolygonCollider*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefPolygonCollider(PolygonCollider value) {
      var r = default(AssetRefPolygonCollider);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefPolygonCollider(AssetRef value) {
      return new AssetRefPolygonCollider { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefPolygonCollider value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<PolygonCollider>(AssetRefPolygonCollider value) {
      return new AssetRef<PolygonCollider>(value.Id);
    }
    public static implicit operator AssetRefPolygonCollider(AssetRef<PolygonCollider> value) {
      return new AssetRefPolygonCollider(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefPolygonCollider other && Equals(other);
    }
    public Boolean Equals(AssetRefPolygonCollider other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefPolygonCollider a, AssetRefPolygonCollider b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefPolygonCollider a, AssetRefPolygonCollider b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16087;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(SimulationConfig))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.SimulationConfig> instead")]
  public unsafe partial struct AssetRefSimulationConfig : System.IEquatable<AssetRefSimulationConfig>, IAssetRef<SimulationConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefSimulationConfig(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefSimulationConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefSimulationConfig(SimulationConfig value) {
      var r = default(AssetRefSimulationConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefSimulationConfig(AssetRef value) {
      return new AssetRefSimulationConfig { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefSimulationConfig value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<SimulationConfig>(AssetRefSimulationConfig value) {
      return new AssetRef<SimulationConfig>(value.Id);
    }
    public static implicit operator AssetRefSimulationConfig(AssetRef<SimulationConfig> value) {
      return new AssetRefSimulationConfig(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefSimulationConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefSimulationConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefSimulationConfig a, AssetRefSimulationConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefSimulationConfig a, AssetRefSimulationConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3659;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(SystemsConfig))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.SystemsConfig> instead")]
  public unsafe partial struct AssetRefSystemsConfig : System.IEquatable<AssetRefSystemsConfig>, IAssetRef<SystemsConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefSystemsConfig(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefSystemsConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefSystemsConfig(SystemsConfig value) {
      var r = default(AssetRefSystemsConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefSystemsConfig(AssetRef value) {
      return new AssetRefSystemsConfig { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefSystemsConfig value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<SystemsConfig>(AssetRefSystemsConfig value) {
      return new AssetRef<SystemsConfig>(value.Id);
    }
    public static implicit operator AssetRefSystemsConfig(AssetRef<SystemsConfig> value) {
      return new AssetRefSystemsConfig(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefSystemsConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefSystemsConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefSystemsConfig a, AssetRefSystemsConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefSystemsConfig a, AssetRefSystemsConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16889;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(TerrainCollider))]
  [System.SerializableAttribute()]
  [System.ObsoleteAttribute("Use AssetRef<Quantum.TerrainCollider> instead")]
  public unsafe partial struct AssetRefTerrainCollider : System.IEquatable<AssetRefTerrainCollider>, IAssetRef<TerrainCollider> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public AssetRefTerrainCollider(AssetGuid value) {
      Id = value;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefTerrainCollider*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefTerrainCollider(TerrainCollider value) {
      var r = default(AssetRefTerrainCollider);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public static explicit operator AssetRefTerrainCollider(AssetRef value) {
      return new AssetRefTerrainCollider { Id = value.Id };
    }
    public static implicit operator AssetRef(AssetRefTerrainCollider value) {
      return new AssetRef(value.Id);
    }
    public static implicit operator AssetRef<TerrainCollider>(AssetRefTerrainCollider value) {
      return new AssetRef<TerrainCollider>(value.Id);
    }
    public static implicit operator AssetRefTerrainCollider(AssetRef<TerrainCollider> value) {
      return new AssetRefTerrainCollider(value.Id);
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefTerrainCollider other && Equals(other);
    }
    public Boolean Equals(AssetRefTerrainCollider other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefTerrainCollider a, AssetRefTerrainCollider b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefTerrainCollider a, AssetRefTerrainCollider b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10607;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefBinaryData value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefCharacterController2DConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefCharacterController3DConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefEntityPrototype value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefEntityView value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefMap value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefNavMesh value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefNavMeshAgentConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefPhysicsMaterial value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefPolygonCollider value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefSimulationConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefSystemsConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    [System.ObsoleteAttribute("No longer needed")]
    public static void Serialize(this IBitStream stream, ref AssetRefTerrainCollider value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  public unsafe partial class Statics {
    static partial void RegisterLegacySimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(Quantum.AssetRefBinaryData), Quantum.AssetRefBinaryData.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefCharacterController2DConfig), Quantum.AssetRefCharacterController2DConfig.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefCharacterController3DConfig), Quantum.AssetRefCharacterController3DConfig.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefEntityPrototype), Quantum.AssetRefEntityPrototype.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefEntityView), Quantum.AssetRefEntityView.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefMap), Quantum.AssetRefMap.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefNavMesh), Quantum.AssetRefNavMesh.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefNavMeshAgentConfig), Quantum.AssetRefNavMeshAgentConfig.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefPhysicsMaterial), Quantum.AssetRefPhysicsMaterial.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefPolygonCollider), Quantum.AssetRefPolygonCollider.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefSimulationConfig), Quantum.AssetRefSimulationConfig.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefSystemsConfig), Quantum.AssetRefSystemsConfig.SIZE);
      typeRegistry.Register(typeof(Quantum.AssetRefTerrainCollider), Quantum.AssetRefTerrainCollider.SIZE);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
